openapi: 3.0.1
info:
  title: Sandpiper Framework
  description: The Sandpiper Framework
  contact:
    name: The Sandpiper Authors
    email: piper@sandpiperframework.net
    url: "http://www.sandpiperframework.net"
  license:
    name: Artistic License 2.0
    url: "https://www.perlfoundation.org/artistic-license-20.html"
  version: 0.9.10

components:
  schemas:
    v4_uuid:
      description: An RFC4122 v4 UUID
      type: string
      format: uuid
    payload:
      description: A payload for an encoded binary object
      type: string
      format: base64
      nullable: true
    sandpiper_message:
      description: A message to be passed between actors
      type: object
      required:
        - message_code
        - message_text
      properties:
        message_code:
          type: integer
          nullable: false
        message_text:
          type: string
          nullable: true
    plan_status_action:
      type: string
      enum:
        - propose
        - approve
        - hold
        - terminate
        - obsolete
    plan_status:
      type: string
      enum:
        - Proposed
        - Approved
        - On Hold
        - Terminated
        - Obsolete
    plan:
      type: object
      required:
        - plan_uuid
        - plan_description
        - plan_status
        - plan_status_on
        - primary_approved_on
        - secondary_approved_on
        - payload
      properties:
        plan_uuid:
          $ref: "#/components/schemas/v4_uuid"
        plan_description:
          type: string
        plan_status:
          $ref: "#/components/schemas/plan_status"
        plan_status_on:
          type: string
          format: date-time
        primary_approved_on:
          type: string
          format: date-time
          nullable: true
        secondary_approved_on:
          type: string
          format: date-time
          nullable: true
        payload:
          $ref: "#/components/schemas/payload"
    slice:
      type: object
      required:
        - slice_uuid
        - slice_description
        - slice_type
        - file_name
        - slice_meta_data
        - slice_order
        - slice_grainlist_hash
      properties:
        slice_uuid:
          $ref: "#/components/schemas/v4_uuid"
        slice_description:
          type: string
        slice_type:
          type: string
        file_name:
          type: string
          nullable: true
        slice_meta_data:
          description: reserved for future use
          type: string
          nullable: true
        slice_order:
          type: integer
        slice_grainlist_hash:
          description: reserved for future use
          type: string
          format: binary
          nullable: true
    grain:
      description: A single grain object
      type: object
      required:
        - grain_uuid
        - grain_order
        - grain_key
        - grain_reference
        - payload
      properties:
        grain_uuid:
          $ref: "#/components/schemas/v4_uuid"
        grain_order:
          description: Order of the grain within the slice from which it was accessed
          type: integer
        grain_key:
          description: A unique value that identifies a key, pivotal value within the grain's content, e.g. a part number
        grain_reference:
          description: A value that may or may not be unique but provides an index to the grain that is not found in its contents, e.g. an internal system ID at the grain's genesis
        payload:
          $ref: "#/components/schemas/payload"

  responses:
    plan_get:
      description: Data for a single plan
      content:
        application/json:
          schema:
            properties:
              plan:
                $ref: "#/components/schemas/plan"
              message:
                $ref: "#/components/schemas/sandpiper_message"
    plans_get:
      description: A collection of plans
      content:
        application/json:
          schema:
            properties:
              plans:
                type: array
                items:
                  $ref: "#/components/schemas/plan"
              message:
                $ref: "#/components/schemas/sandpiper_message"
    slice_get:
      description: Core data for a single slice
      content:
        application/json:
          schema:
            properties:
              slice:
                $ref: "#/components/schemas/slice"
              message:
                $ref: "#/components/schemas/sandpiper_message"
    grain_get:
      description: Data for a single grain
      content:
        application/json:
          schema:
            properties:
              grain:
                $ref: "#/components/schemas/grain"
              message:
                $ref: "#/components/schemas/sandpiper_message"
    grains_get:
      description: A collection of grains
      content:
        application/json:
          schema:
            properties:
              grains:
                type: array
                items:
                  $ref: "#/components/schemas/grain"
              message:
                $ref: "#/components/schemas/sandpiper_message"

  parameters:
    plan_uuid:
      name: plan_uuid
      in: path
      description: A unique plan ID
      required: true
      schema:
        $ref: "#/components/schemas/v4_uuid"
    slice_uuid:
      name: slice_uuid
      in: path
      description: A unique slice ID
      required: true
      schema:
        $ref: "#/components/schemas/v4_uuid"
    grain_uuid:
      name: grain_uuid
      in: path
      description: A unique grain UUID
      required: true
      schema:
        $ref: "#/components/schemas/v4_uuid"
    plan_detail:
      name: detail
      in: query
      description: Optionally controls the level of detail that will be returned for a plan
      schema:
        type: string
        enum:
          - PLAN_WITH_DOCUMENT
          - PLAN_WITHOUT_DOCUMENT
        default: PLAN_WITHOUT_DOCUMENT
    grain_detail:
      name: detail
      in: query
      description: Optionally controls the delivery of grain contents or just metadata
      schema:
        type: string
        enum:
          - GRAIN_WITH_PAYLOAD
          - GRAIN_WITHOUT_PAYLOAD
        default: GRAIN_WITHOUT_PAYLOAD

paths:
  /plans:
    description: All plans available to the authenticated user
    get:
      tags:
        - object collections
      summary: >-
        Get the list of all plans stored on the respondent, optionally with
        their document contents as well.
      parameters:
        - $ref: "#/components/parameters/plan_detail"
      responses:
        200:
          $ref: "#/components/responses/plans_get"
        401:
          description: "Access denied, requester is not logged in or authenticated"
        403:
          description: >-
            Access denied, the current user does not have access to this
            endpoint
  /plans/{plan_uuid}:
    description: A specific plan
    get:
      tags:
        - objects
      summary: Access a specific plan using its unique identifier
      parameters:
        - $ref: "#/components/parameters/plan_uuid"
      responses:
        200:
          $ref: "#/components/responses/plan_get"
        401:
          description: "Access denied, requester is not logged in or authenticated"
        403:
          description: >-
            Access denied, the current user does not have access to this
            endpoint or the plan uuid given does not exist
  /plans/{generator_action}:
    description: >-
      Generate a fragment plan or upload a previously-unknown plan as a new
      proposal
    post:
      tags:
        - actions
      summary: Transfer a plan or plan fragment to the respondent
      description: >-
        A primary initiator can provide a fragment plan document to the
        secondary respondent with the "invoke" parameter. Primary or secondary
        initiators can also propose a wholly new plan with the "propose"
        parameter.
      parameters:
        - name: generator_action
          in: path
          description: >-
            Invoke a fragment plan to bootstrap a fully new plan, or Propose a
            previously-unshared complete plan to the other actor
          required: true
          schema:
            type: string
            enum:
              - invoke
              - propose
      responses:
        200:
          description: OK
    get:
      tags:
        - actions
      summary: Download a plan fragment from the respondent
      description: >-
        A secondary initiator can download a fragment plan document from the
        primary respondent with the "invoke" parameter.
      parameters:
        - name: generator_action
          in: path
          description: >-
            Invoke a fragment plan to bootstrap a fully new plan, or Propose a
            previously-unshared complete plan to the other actor
          required: true
          schema:
            type: string
            enum:
              - invoke
      responses:
        200:
          description: OK
  /plans/{plan_uuid}/{status_action}:
    description: Modify a given plan"s status
    parameters:
      - $ref: "#/components/parameters/plan_uuid"
      - name: status_action
        in: path
        description: >-
          By posting to this endpoint, an actor can alter the current status of
          a specific plan. Note that there are rules in place to govern the
          direction these can move in; see the documentation for more details.
        required: true
        schema:
          $ref: "#/components/schemas/plan_status_action"
    post:
      tags:
        - actions
      summary: Alter the status of a specific plan.
      responses:
        200:
          description: OK
  /slices/{slice_uuid}:
    description: A specific slice
    parameters:
      - $ref: "#/components/parameters/slice_uuid"
    get:
      tags:
        - objects
      summary: Get the metadata for a specific slice
      responses:
        200:
          $ref: "#/components/responses/slice_get"
  /slices/{slice_uuid}/grains:
    description: All grains within a specific slice
    parameters:
      - $ref: "#/components/parameters/slice_uuid"
      - $ref: "#/components/parameters/grain_detail"
    get:
      tags:
        - object collections
      summary: Get all grains within a specific slice
      responses:
        200:
          $ref: "#/components/responses/grains_get"
  /slices/{slice_uuid}/grains/{grain_uuid}:
    description: A specific grain within a specific slice
    parameters:
      - $ref: "#/components/parameters/slice_uuid"
      - $ref: "#/components/parameters/grain_uuid"
    get:
      tags:
        - objects
      summary: Get the metadata and optionally the content of a specific grain
      parameters:
        - $ref: "#/components/parameters/grain_detail"
      responses:
        200:
          description: OK
    delete:
      tags:
        - actions
      summary: Remove a specific grain from a specific slice
      responses:
        200:
          description: OK
    post:
      tags:
        - actions
      summary: Add a specific grain to a specific slice
      responses:
        200:
          description: OK
